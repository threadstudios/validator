{"version":3,"sources":["index.js"],"names":["validator","isRequired","value","basicLang","check","field","replace","toLowerCase","runRules","rules","key","toValidate","split","reduce","acc","rule","isValid","errors","push","console","log","config","values","lang","result","fields","errorFields","errorMessages","k","ruleResult","Object"],"mappings":";AA6DC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA7DD,IAAA,EAAA,EAAA,QAAA,cA6DC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3DDA,EAAUC,QAAAA,WAAcC,CAAAA,GACZA,GAAmB,KAAVA,GAGrB,MAAMC,EAAY,CAACC,EAAOC,KACfD,OAAAA,GACE,IAAA,aACO,SAAEC,gBACT,IAAA,UACO,SAAEA,mCACd,QACY,SAAEA,qBAAyBD,EAAME,QAAQ,KAAM,IAAIC,kBAIvE,SAASC,EAASC,EAAOP,EAAOQ,GAErBC,OADYF,EAAMG,MAAM,KACbC,OAAO,CAACC,EAAKC,KACvBf,GAAAA,EAAUe,QAAAA,GAAO,CAMVD,OALYd,EAAUe,QAAAA,GAAMb,KACD,IAAhBY,EAAIE,UAClBF,EAAIE,SAAU,EACdF,EAAIG,OAAOC,KAAKf,EAAUY,EAAML,KAE7BI,EAEPK,QAAQC,IAAI,qCAEjB,CAAEJ,SAAU,EAAMC,OAAS,KAG3B,SAASD,EAAQK,EAAQC,EAAQC,GAAO,GACvCC,IAAAA,EAAS,CACTC,OAAS,GACTC,YAAc,GACdC,cAAe,GACfX,QAAU,MAEV,IAAA,IAAIY,KAAKP,EAAQ,CACbQ,IAAAA,EACoB,iBAAdR,EAAOO,GACbC,EAAarB,EAASa,EAAOO,GAAIN,EAAOM,GAAIA,GAE5CT,QAAQC,WAAWC,EAAQA,GAE/BG,EAAOC,OAAOG,GAAKC,EAAWb,SACH,IAAvBa,EAAWb,UACXQ,EAAOE,YAAYR,KAAKU,GACxBJ,EAAOG,cAAcT,QAAQW,EAAWZ,SAUzCO,OAPPA,EAAOR,QAAUc,OAAOR,OAAOE,EAAOC,QACrCZ,OAAO,CAACC,EAAKT,MACG,IAAVA,IAA2B,IAARS,IAClBA,GAAM,GAEHA,IACR,GACIU","file":"index.js","sourceRoot":"../src","sourcesContent":["import validator from 'validator';\n\nvalidator.isRequired = (value) => {\n    return (value && value !== \"\");\n};\n\nconst basicLang = (check, field) => {\n    switch(check) {\n        case 'isRequired':\n            return `${field} is required`;\n        case 'isEmail':\n            return `${field} must be a valid E-mail address`;\n        default:\n            return `${field} must be a valid ${check.replace('is', '').toLowerCase()}`;\n    }\n}\n\nfunction runRules(rules, value, key) {\n    const toValidate = rules.split('|')\n    return toValidate.reduce((acc, rule) => {\n        if (validator[rule]) {\n            const ruleResult = validator[rule](value);\n            if(!ruleResult && acc.isValid !== false) {\n                acc.isValid = false;\n                acc.errors.push(basicLang(rule, key));\n            }\n            return acc;\n        } else {\n            console.log(\"unable to find validate function\");\n        }\n    }, { isValid : true, errors : [] });\n}\n\nexport function isValid(config, values, lang = false) {\n    let result = {\n        fields : {},\n        errorFields : [],\n        errorMessages: [],\n        isValid : null\n    };\n    for(let k in config) {\n        let ruleResult;\n        if(typeof config[k] === \"string\") {\n            ruleResult = runRules(config[k], values[k], k);\n        } else {\n            console.log(typeof config, config);\n        }\n        result.fields[k] = ruleResult.isValid;\n        if (ruleResult.isValid === false) {\n            result.errorFields.push(k);\n            result.errorMessages.push(...ruleResult.errors);\n        }\n    }\n    result.isValid = Object.values(result.fields)\n    .reduce((acc, field) => {\n        if(field === false && acc === true) {\n            acc = false;\n        }\n        return acc;\n    }, true)\n    return result;\n}"]}